LOG  {"config": {"adapter": ["xhr", "http", "fetch"], "baseURL": "http://10.0.3.252:5000", "data": "{\"TipoAnimal\":\"Ddff\",\"Linhagem\":\"Ggffg\",\"Idade\":\"3\",\"Sexo\":\"F\",\"Cor\":\"Gggg\",\"Descricao\":\"Ggffff\"}", "env": {"Blob": [Function Blob], "FormData": [Function FormData]}, "headers": [Object], "maxBodyLength": -1, "maxContentLength": -1, "method": "post", "timeout": 0, "transformRequest": [[Function transformRequest]], "transformRespoObject], "maxBodyLength": -1, "maxContentLength": -1, "method": "post", "timeout": 0, "transformRequest": [[Function transformRequest]], "transformResponse": [[Function transformResponse]], "transitional": {"clarifyTimeoutError": false, "forcedJSONParsing": true, "silentJSONParsing": true}, "url": "/Cadnse": [[Function transformResponse]], "transitional": {"clarifyTimeoutError": false, "forcedJSONParsing": true, "silentJSONParsing": true}, "url": "/CadastraPet", "validateStatus": [Function validateStatus], "xsrfCookieName": "XSRF-TOKEN", "xsrfHeaderName": "X-XSRF-TOKEN"}, "data": {"idDoPet": 4, "sucess": "pet cadastrado com sucesso"}, "duration": 336, "headers": {"connection": "keep-alive", "content-length": "51", "content-type": "application/json; charset=utf-8", "date": "Wed, 02 Oct 2024 23:47:13 GMT", "etag": "W/\"33-HVy8cQZV8Y24rK8OpFc+yqmTS5g\"", "keep-alive": "timeout=5", "x-powered-by": "Express"}, "ok": true, "originalError": null, "problem": null, "status": 200}


esta funcionado corretamente mais a validação do front do mobile esta caindo no erro: import React, { useState } from "react";
import {
  View,
  Text,
  StyleSheet,
  TextInput,
  TouchableOpacity,
  ScrollView,
  Alert,
} from "react-native";
import MaterialIcons from "react-native-vector-icons/MaterialIcons"; // Correção no import
import api from "../../Service/tokenService"; // Certifique-se que esse caminho está correto para sua API configurada
import AsyncStorage from '@react-native-async-storage/async-storage'; // Para armazenamento do token

const CadastroPet = ({ navigation }) => {
  const [TipoAnimal, setTipoAnimal] = useState("");
  const [Linhagem, setLinhagem] = useState("");
  const [Idade, setIdade] = useState("");
  const [Sexo, setSexo] = useState("");
  const [Cor, setCor] = useState("");
  const [Descricao, setDescricao] = useState("");

  const handleCadastroPet = async () => {
    // Validação das entradas
    if (!TipoAnimal || !Linhagem || !Idade || !Sexo || !Cor || !Descricao) {
      Alert.alert("Erro", "Por favor, preencha todos os campos.");
      return;
    }

    const petData = {
      TipoAnimal: String(TipoAnimal),
      Linhagem: String(Linhagem),
      Idade: String(Idade),
      Sexo: String(Sexo),
      Cor: String(Cor),
      Descricao: String(Descricao),
    };

    console.log("Dados do pet:", petData);

    try {
      const token = await AsyncStorage.getItem('@CodeApi:token');

      if (!token) {
        Alert.alert('Erro', 'Usuário não autenticado. Faça login novamente.');
        return;
      }
      
      if (!token) {
        Alert.alert("Erro", "Token não encontrado. Faça login novamente.");
        return; // Para evitar a execução da requisição sem um token válido
      }


        const response = await api.post("/CadastraPet", petData, {
          headers: {
            Authorization: token, // Envia o token no cabeçalho
            "Content-Type": "application/json",
          },
        });

        if (response.data.success) {
          Alert.alert("Sucesso", "Pet cadastrado com sucesso!");
          navigation.navigate("Home"); // Navega para a página inicial
        } else {
          Alert.alert("Erro", response.data.error || "Não foi possível cadastrar o pet.");
          console.log(response);
        }
      } catch (error) {
        console.error("Erro ao cadastrar pet:", error);
        Alert.alert("Erro", "Ocorreu um erro ao cadastrar o pet.");
      }
    };

    const renderInput = (placeholder, iconName, value, onChangeText) => (
      <View style={styles.inputContainer}>
        <MaterialIcons name={iconName} size={24} color="#B0BEC5" />
        <TextInput
          style={styles.input}
          placeholder={placeholder}
          value={value}
          onChangeText={onChangeText}
        />
      </View>
    );

    return (
      <ScrollView contentContainerStyle={{ flexGrow: 1 }}>
        <View style={styles.container}>
          <Text style={styles.header}>Cadastrar Pet</Text>
          {renderInput("Tipo do Animal", "pets", TipoAnimal, setTipoAnimal)}
          {renderInput("Linhagem", "category", Linhagem, setLinhagem)}
          {renderInput("Idade", "calendar-today", Idade, setIdade)}
          {renderInput("Sexo", "person", Sexo, setSexo)}
          {renderInput("Cor", "palette", Cor, setCor)}
          {renderInput("Descrição", "description", Descricao, setDescricao)}

          <TouchableOpacity style={styles.button} onPress={handleCadastroPet}>
            <Text style={styles.buttonText}>Cadastrar Pet</Text>
          </TouchableOpacity>
        </View>
      </ScrollView>
    );
  };

  const styles = StyleSheet.create({
    container: {
      flex: 1,
      padding: 20,
      backgroundColor: "#fff",
    },
    header: {
      fontSize: 24,
      fontWeight: "bold",
      marginBottom: 20,
      textAlign: "center",
    },
    inputContainer: {
      flexDirection: "row",
      alignItems: "center",
      borderBottomWidth: 1,
      borderBottomColor: "#B0BEC5",
      marginBottom: 15,
    },
    input: {
      flex: 1,
      height: 40,
      fontSize: 16,
      marginLeft: 10,
      color: "#333",
    },
    button: {
      backgroundColor: "#134973",
      padding: 15,
      borderRadius: 5,
      alignItems: "center",
      marginTop: 20,
    },
    buttonText: {
      color: "#fff",
      fontSize: 18,
      fontWeight: "bold",
    },
  });

  export default CadastroPet;
 arruma para Mim